diff --git a/compiler/src/main/java/android/databinding/tool/reflection/SdkUtil.java b/compiler/src/main/java/android/databinding/tool/reflection/SdkUtil.java
index d9a82d66..f4533856 100644
--- a/compiler/src/main/java/android/databinding/tool/reflection/SdkUtil.java
+++ b/compiler/src/main/java/android/databinding/tool/reflection/SdkUtil.java
@@ -123,7 +123,7 @@ public class SdkUtil {
                 mXPath = xPathFactory.newXPath();
                 buildFullLookup();
             } catch (Throwable t) {
-                L.e(t, "cannot load api descriptions from %s", apiFile);
+                L.w(t, "cannot load api descriptions from %s", apiFile);
             } finally {
                 IOUtils.closeQuietly(inputStream);
             }
diff --git a/compilerCommon/src/main/java/android/databinding/tool/LayoutXmlProcessor.java b/compilerCommon/src/main/java/android/databinding/tool/LayoutXmlProcessor.java
index a9fd885c..564d15ac 100644
--- a/compilerCommon/src/main/java/android/databinding/tool/LayoutXmlProcessor.java
+++ b/compilerCommon/src/main/java/android/databinding/tool/LayoutXmlProcessor.java
@@ -182,7 +182,7 @@ public class LayoutXmlProcessor {
             public void processLayoutFile(File file)
                     throws ParserConfigurationException, SAXException, XPathExpressionException,
                     IOException {
-                processSingleFile(RelativizableFile.fromAbsoluteFile(file, null),
+                processSingleFile(RelativizableFile.fromAbsoluteFile(file, input.getRootInputFolder()),
                         convertToOutFile(file), isViewBindingEnabled);
             }
 
diff --git a/exec/src/main/java/android/databinding/AndroidDataBinding.kt b/exec/src/main/java/android/databinding/AndroidDataBinding.kt
index 537bc705..0ac5da71 100644
--- a/exec/src/main/java/android/databinding/AndroidDataBinding.kt
+++ b/exec/src/main/java/android/databinding/AndroidDataBinding.kt
@@ -218,7 +218,9 @@ object AndroidDataBinding {
         }
 
         private fun doWrite(entryPath: String, contents: String) {
-            val entry = ZipEntry(entryPath)
+            val entry = ZipEntry(entryPath).apply {
+                time = ZipUtil.DEFAULT_TIMESTAMP
+            }
             try {
                 zos.putNextEntry(entry)
                 zos.write(contents.toByteArray(Charsets.UTF_8))
diff --git a/exec/src/main/java/android/databinding/cli/ZipUtil.kt b/exec/src/main/java/android/databinding/cli/ZipUtil.kt
index 7d41ac3c..d611360e 100644
--- a/exec/src/main/java/android/databinding/cli/ZipUtil.kt
+++ b/exec/src/main/java/android/databinding/cli/ZipUtil.kt
@@ -21,11 +21,14 @@ import org.apache.commons.io.FileUtils
 import org.apache.commons.io.filefilter.TrueFileFilter
 import java.io.File
 import java.io.FileOutputStream
+import java.util.*
 import java.util.zip.ZipEntry
 import java.util.zip.ZipFile
 import java.util.zip.ZipOutputStream
 
 object ZipUtil {
+    val DEFAULT_TIMESTAMP = GregorianCalendar(1980, Calendar.FEBRUARY, 1, 0, 0, 0).timeInMillis
+
     fun unzip(file: File, outFolder: File) {
         if (!outFolder.exists() && !outFolder.mkdirs()) {
             throw RuntimeException("unable to create out folder ${outFolder.absolutePath}")
@@ -57,7 +60,9 @@ object ZipUtil {
                     .forEach { file ->
                         val entry = ZipEntry(
                             file.absolutePath.substring(inputAbsPath + 1)
-                        )
+                        ).apply {
+                            time = DEFAULT_TIMESTAMP
+                        }
                         try {
                             zos.putNextEntry(entry)
                             zos.write(file.readBytes())
@@ -68,6 +73,6 @@ object ZipUtil {
                     }
             }
         }
-
+        outFile.setLastModified(DEFAULT_TIMESTAMP)
     }
 }
diff --git a/exec/src/test/java/android/databinding/cli/GenerateBaseClassesTest.kt b/exec/src/test/java/android/databinding/cli/GenerateBaseClassesTest.kt
index 384366d8..20467b39 100644
--- a/exec/src/test/java/android/databinding/cli/GenerateBaseClassesTest.kt
+++ b/exec/src/test/java/android/databinding/cli/GenerateBaseClassesTest.kt
@@ -107,7 +107,7 @@ class GenerateBaseClassesTest {
         val infoOut = File(out, "infoOut")
         val options = ProcessXmlOptions().apply {
             appId = pkg
-            resInput = File("src/test-data/$inputCase")
+            resInput = File("src/test-data/$inputCase").absoluteFile
             resOutput = resOut
             layoutInfoOutput = infoOut
             setZipLayoutInfo(true)
diff --git a/exec/src/test/java/android/databinding/cli/ProcessXmlTest.kt b/exec/src/test/java/android/databinding/cli/ProcessXmlTest.kt
index fdff077b..e23b79f1 100644
--- a/exec/src/test/java/android/databinding/cli/ProcessXmlTest.kt
+++ b/exec/src/test/java/android/databinding/cli/ProcessXmlTest.kt
@@ -48,7 +48,7 @@ class ProcessXmlTest {
         val infoOut = File(out, "infoOut")
         val options = ProcessXmlOptions().apply {
             appId = "foo.baz"
-            resInput = File("src/test-data/base")
+            resInput = File("src/test-data/base").absoluteFile
             resOutput = resOut
             layoutInfoOutput = infoOut
             setZipLayoutInfo(useZip)
diff --git a/extensions-support/gradle/wrapper/gradle-wrapper.properties b/extensions-support/gradle/wrapper/gradle-wrapper.properties
index 4097a71e..1fb636e4 100644
--- a/extensions-support/gradle/wrapper/gradle-wrapper.properties
+++ b/extensions-support/gradle/wrapper/gradle-wrapper.properties
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=../../../../external/gradle/gradle-6.1-rc-1-bin.zip
+distributionUrl=../../../../external/gradle/gradle-6.1.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
